// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:leshua/model/check_sn_bind_entity.dart';
import 'package:leshua/model/common_bean_entity.dart';
import 'package:leshua/model/login_info_entity.dart';
import 'package:leshua/model/merchant_detail_entity.dart';
import 'package:leshua/model/merchant_entity.dart';
import 'package:leshua/model/policy_model_entity.dart';
import 'package:leshua/model/sn_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(CheckSnBindEntity).toString(): CheckSnBindEntity.fromJson,
		(CommonBeanEntity).toString(): CommonBeanEntity.fromJson,
		(LoginInfoEntity).toString(): LoginInfoEntity.fromJson,
		(LoginInfoDataUser).toString(): LoginInfoDataUser.fromJson,
		(MerchantDetailEntity).toString(): MerchantDetailEntity.fromJson,
		(MerchantDetailCacheMerchantInfo).toString(): MerchantDetailCacheMerchantInfo.fromJson,
		(MerchantDetailCacheMerchantInfoMerInfoBaseTempVO).toString(): MerchantDetailCacheMerchantInfoMerInfoBaseTempVO.fromJson,
		(MerchantDetailCacheMerchantInfoMerSettleInfoTempVO).toString(): MerchantDetailCacheMerchantInfoMerSettleInfoTempVO.fromJson,
		(MerchantDetailCacheMerchantInfoMerchantContactTempInfoVO).toString(): MerchantDetailCacheMerchantInfoMerchantContactTempInfoVO.fromJson,
		(MerchantDetailMerchantInfo).toString(): MerchantDetailMerchantInfo.fromJson,
		(MerchantDetailMerchantInfoMerInfoBaseTempVO).toString(): MerchantDetailMerchantInfoMerInfoBaseTempVO.fromJson,
		(MerchantDetailMerchantInfoMerSettleInfoTempVO).toString(): MerchantDetailMerchantInfoMerSettleInfoTempVO.fromJson,
		(MerchantDetailMerchantInfoMerchantContactTempInfoVO).toString(): MerchantDetailMerchantInfoMerchantContactTempInfoVO.fromJson,
		(MerchantEntity).toString(): MerchantEntity.fromJson,
		(PolicyModelEntity).toString(): PolicyModelEntity.fromJson,
		(PolicyModelList).toString(): PolicyModelList.fromJson,
		(SnEntity).toString(): SnEntity.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if(value == null){
      return null;
    }
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<CheckSnBindEntity>[] is M){
			return data.map<CheckSnBindEntity>((Map<String, dynamic> e) => CheckSnBindEntity.fromJson(e)).toList() as M;
		}
		if(<CommonBeanEntity>[] is M){
			return data.map<CommonBeanEntity>((Map<String, dynamic> e) => CommonBeanEntity.fromJson(e)).toList() as M;
		}
		if(<LoginInfoEntity>[] is M){
			return data.map<LoginInfoEntity>((Map<String, dynamic> e) => LoginInfoEntity.fromJson(e)).toList() as M;
		}
		if(<LoginInfoDataUser>[] is M){
			return data.map<LoginInfoDataUser>((Map<String, dynamic> e) => LoginInfoDataUser.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailEntity>[] is M){
			return data.map<MerchantDetailEntity>((Map<String, dynamic> e) => MerchantDetailEntity.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailCacheMerchantInfo>[] is M){
			return data.map<MerchantDetailCacheMerchantInfo>((Map<String, dynamic> e) => MerchantDetailCacheMerchantInfo.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailCacheMerchantInfoMerInfoBaseTempVO>[] is M){
			return data.map<MerchantDetailCacheMerchantInfoMerInfoBaseTempVO>((Map<String, dynamic> e) => MerchantDetailCacheMerchantInfoMerInfoBaseTempVO.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailCacheMerchantInfoMerSettleInfoTempVO>[] is M){
			return data.map<MerchantDetailCacheMerchantInfoMerSettleInfoTempVO>((Map<String, dynamic> e) => MerchantDetailCacheMerchantInfoMerSettleInfoTempVO.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailCacheMerchantInfoMerchantContactTempInfoVO>[] is M){
			return data.map<MerchantDetailCacheMerchantInfoMerchantContactTempInfoVO>((Map<String, dynamic> e) => MerchantDetailCacheMerchantInfoMerchantContactTempInfoVO.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailMerchantInfo>[] is M){
			return data.map<MerchantDetailMerchantInfo>((Map<String, dynamic> e) => MerchantDetailMerchantInfo.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailMerchantInfoMerInfoBaseTempVO>[] is M){
			return data.map<MerchantDetailMerchantInfoMerInfoBaseTempVO>((Map<String, dynamic> e) => MerchantDetailMerchantInfoMerInfoBaseTempVO.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailMerchantInfoMerSettleInfoTempVO>[] is M){
			return data.map<MerchantDetailMerchantInfoMerSettleInfoTempVO>((Map<String, dynamic> e) => MerchantDetailMerchantInfoMerSettleInfoTempVO.fromJson(e)).toList() as M;
		}
		if(<MerchantDetailMerchantInfoMerchantContactTempInfoVO>[] is M){
			return data.map<MerchantDetailMerchantInfoMerchantContactTempInfoVO>((Map<String, dynamic> e) => MerchantDetailMerchantInfoMerchantContactTempInfoVO.fromJson(e)).toList() as M;
		}
		if(<MerchantEntity>[] is M){
			return data.map<MerchantEntity>((Map<String, dynamic> e) => MerchantEntity.fromJson(e)).toList() as M;
		}
		if(<PolicyModelEntity>[] is M){
			return data.map<PolicyModelEntity>((Map<String, dynamic> e) => PolicyModelEntity.fromJson(e)).toList() as M;
		}
		if(<PolicyModelList>[] is M){
			return data.map<PolicyModelList>((Map<String, dynamic> e) => PolicyModelList.fromJson(e)).toList() as M;
		}
		if(<SnEntity>[] is M){
			return data.map<SnEntity>((Map<String, dynamic> e) => SnEntity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}